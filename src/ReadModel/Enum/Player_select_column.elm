-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ReadModel.Enum.Player_select_column exposing (Player_select_column(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "player"

  - Value - column name

-}
type Player_select_column
    = Value


list : List Player_select_column
list =
    [ Value ]


decoder : Decoder Player_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "value" ->
                        Decode.succeed Value

                    _ ->
                        Decode.fail ("Invalid Player_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Player_select_column -> String
toString enum =
    case enum of
        Value ->
            "value"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Player_select_column
fromString enumString =
    case enumString of
        "value" ->
            Just Value

        _ ->
            Nothing
