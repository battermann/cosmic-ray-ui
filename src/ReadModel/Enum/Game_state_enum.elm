-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ReadModel.Enum.Game_state_enum exposing (Game_state_enum(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


type Game_state_enum
    = Draw
    | In_progress
    | Red_won
    | Yellow_won


list : List Game_state_enum
list =
    [ Draw, In_progress, Red_won, Yellow_won ]


decoder : Decoder Game_state_enum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "draw" ->
                        Decode.succeed Draw

                    "in_progress" ->
                        Decode.succeed In_progress

                    "red_won" ->
                        Decode.succeed Red_won

                    "yellow_won" ->
                        Decode.succeed Yellow_won

                    _ ->
                        Decode.fail ("Invalid Game_state_enum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : Game_state_enum -> String
toString enum =
    case enum of
        Draw ->
            "draw"

        In_progress ->
            "in_progress"

        Red_won ->
            "red_won"

        Yellow_won ->
            "yellow_won"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Game_state_enum
fromString enumString =
    case enumString of
        "draw" ->
            Just Draw

        "in_progress" ->
            Just In_progress

        "red_won" ->
            Just Red_won

        "yellow_won" ->
            Just Yellow_won

        _ ->
            Nothing
